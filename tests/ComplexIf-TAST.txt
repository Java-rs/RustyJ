Class {
	name = "ComplexIf",
	fields = [],
	methods = [
		Method {
			retType = boolean,
			name = "f",
			params = [
				VarDecl {
					type = char,
					name = "a",
					val = None
				}
			],
			body = Block ([
				If {
					cond = TypedExpr {
						expr = Binary {
							op = Equal,
							left = TypedExpr {
								expr = LocalOrFieldVar("c"),
								type = char
							},
							right = Char('a')
						},
						type = boolean
					},
					body = TypedStmt {
						expr = Return(Bool(true)),
						type = boolean
					},
					else = Some (
						If {
							cond = TypedExpr {
								expr = Binary {
									op = Equal,
									left = TypedExpr {
										expr = LocalOrFieldVar("c"),
										type = char
									},
									right = Char('b')
								},
								type = boolean
							},
							body = TypedStmt {
								expr = Return(Bool(false)),
								type = boolean
							},
							else = Some (
								cond = TypedExpr {
									expr = Binary {
										op = Equal,
										left = TypedExpr {
											expr = LocalOrFieldVar("c"),
											type = char
										},
										right = Char('c')
									},
									type = boolean
								},
								body = TypedStmt {
									expr = Return(Bool(true)),
									type = boolean
								},
								else = Block([
									If {
										cond = TypedExpr {
											expr = Binary {
												op = Or,
												left = TypedExpr {
													expr = Binary {
														op = Equal,
														left = TypedExpr {
															expr = LocalOrFieldVar("c"),
															type = char
														},
														right = Char('d')
													},
													type = boolean
												},
												right = TypedExpr {
													expr = Binary {
														op = Equal,
														left = TypedExpr {
															expr = LocalOrFieldVar("c"),
															type = char
														},
														right = Char('e')
													},
													type = boolean
												}
											},
											type = boolean,
										},
										body = TypedStmt {
											expr = Return(Bool(false)),
											type = boolean
										},
										else = Some (
											If {
												cond = TypedExpr {
													expr = Binary {
														op = And,
														left = TypedExpr {
															expr = Binary {
																op = Equal,
																left = TypedExpr {
																	expr = LocalOrFieldVar("c"),
																	type = char
																},
																right = Char('f')
															},
															type = boolean
														}
														right = TypedExpr {
															expr = Binary {
																op = Equal,
																left = TypedExpr {
																	expr = LocalOrFieldVar("c"),
																	type = char
																},
																right = Char('g')
															},
															type = boolean
														}
													},
													type = boolean
												},
												body = TypedStmt {
													expr = Return(Bool(true)),
													type = boolean
												},
												else = Some (
													Block ([
														TypedStmt {
															expr = Return(Bool(false))
															type = boolean
														},
													])
												)
											}
										)
									}
								])
							)
						}
					)
				}
			])
		}
	]
}