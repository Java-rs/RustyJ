Class {
	name = "Fib",
	fields = [],
	methods = [
		Method {
			retType = int,
			name = "rec",
			params = [
				VarDecl {
					type = int,
					name = "n",
					val = None
				}
			],
			body = Block([
				If {
					cond = TypedExpr {
						expr = Binary {
							op = LessThan,
							left = TypedExpr {
								expr = LocalOrFieldVar("n"),,
								type = int
							},
							right = Int(2)
						},
						type = boolean
					},
					body = Return(
						expr = TypedExpr {
							expr = LocalOrFieldVar("n"),
							type = int
						}
					),
					else = Some(
						Return(
							TypedExpr {
								expr = Binary {
									op = Add,
									left = TypedStmtExpr {
										expr = MethodCall {
											obj = This,
											name = "rec",
											params = [
												TypedExpr {
													expr = Binary {
														op = Sub,
														left = TypedExpr {
															expr = LocalOrFieldVar("n"),,
															type = int
														},
														right = Int(1)
													},
													type = int
												}
											]
										},
										type = int
									}
									right = TypedStmtExpr {
										expr = MethodCall {
											obj = This,
											name = "rec",
											params = [
												TypedExpr {
													expr = Binary {
														op = Sub,
														left = TypedExpr {
															expr = LocalOrFieldVar("n"),,
															type = int
														},
														right = Int(2)
													},
													type = int
												}
											]
										},
										type = int
									}
								},
								type = int
							}
						)
					)
				}
			])
		},
		Method = {
			retType = int,
			name = "iter",
			params = [
				VarDecl {
					type = int,
					name = "n",
					val = None
				}
			],
			body = Block([
				If {
					cond = TypedExpr {
						expr = Binary {
							op = LessThan,
							left = TypedExpr {
								expr = LocalOrFieldVar("n"),,
								type = int
							},
							right = Int(2)
						},
						type = boolean
					}
					body = Return(
						TypedExpr {
							expr = TypedExpr {
								expr = LocalOrFieldVar("n"),
								type = int
							},
							type = int
						}
					),
					else = None
				},
				VarDecl {
					type = int,
					name = "x",
					val = Int(0)
				},
				VarDecl {
					type = int,
					name = "y",
					val = Int(1)
				},
				VarDecl {
					type = int,
					name = "i",
					val = Int(1)
				},
				While {
					cond = TypedExpr {
						expr = Binary {
							op = LessThan,
							left = TypedExpr {
								expr = LocalOrFieldVar("i"),,
								type = int
							},
							right = TypedExpr {
								expr = LocalOrFieldVar("n"),
								type = int
							},
						},
						type = boolean
					},
					body = Block([
						VarDecl {
							type = int,
							name = "next",
							val = TypedExpr {
								expr = Binary {
										op = Add,
										left = TypedExpr {
											expr = LocalOrFieldVar("y"),
											type = int,
										},
										right = TypedExpr {
											expr = LocalOrFieldVar("x"),
											type = int
										},
									},
								type = int
							}
						},
						Assign {
							var = "x",
							expr = TypedExpr {
								expr = LocalOrFieldVar("y"),
								type = int
							},
						},
						Assign {
							var = "y",
							expr = TypedExpr {
								expr = LocalOrFieldVar("next"),
								type = int
							},
						},
						Assign {
							var = "i",
							expr = TypedExpr {
								expr = Binary {
									op = Add,
									left = TypedExpr {
										expr = LocalOrFieldVar("i"),,
										type = int
									},
									right = Int(1)
								},
								type = int
							}
						},
						Return(
							TypedExpr {
								expr = LocalOrFieldVar("y"),
								type = int
							}
						)
					]),
				}
			])
		}
	]
}