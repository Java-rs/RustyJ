// @Note: WHITESPACE and COMMENT are implicit rules and thus can always be matched in between "~"
WHITESPACE = _{ WHITE_SPACE }
COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

Program = {ClassDecl+}

ClassDecl = {"class" ~ Identifier ~ "{" ~ (MethodDecl|FieldDecl)* ~ "}"}

FieldDecl = {JType ~ FieldVarDecl+}

MethodDecl = {JType ~ Identifier ~ "(" ~ ParamDeclList? ~ ")" ~ BlockStmt}

ParamDeclList = {ParamDecl ~ (","~ParamDecl)*}

ParamDecl = {JType ~ Identifier}

FieldVarDecl = {Identifier ~ ("="~Expr)? ~ ";"}

JType = {PrimitiveType | Identifier}

PrimitiveType = {"int" | "boolean" | "char" | "String" | "void" | "null"}

//ipmlemented
Identifier ={ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }

BlockStmt = {"{" ~ Stmt* ~ "}"}

Stmt = {  WhileStmt
		| IfElseStmt
		| IfStmt
		| ReturnStmt
		| LocalVarDeclStmt
		| StmtExpr ~ ";"
		| BlockStmt }

ReturnStmt = {"return" ~ Expr ~ ";"}

WhileStmt = {"while" ~ "(" ~ Expr ~ ")" ~ Stmt}

// @Question: Is this a correct and easy-to-use definition?
IfElseStmt = {IfStmt ~ "else" ~ IfStmt}

IfStmt = {"if" ~ "(" ~ Expr ~ ")" ~ Stmt}

// @Cleanup: Can maybe be unified with FieldVarDecl and AssignExpr?
LocalVarDeclStmt = {JType ~ Identifier ~ ("="~Expr)?}

StmtExpr = {AssignExpr | NewExpr | MethodCallExpr}

AssignExpr = {(Identifier | InstVarExpr) ~ "=" ~ Expr}

NewExpr = {"new" ~ Identifier ~ "(" ~ ParamList? ~ ")"}

MethodCallExpr = {(Identifier|InstVarExpr) ~ "(" ~ ParamList? ~ ")"}

ParamList = {Expr ~ (","~Expr)*}

// @Note we do not support `super` at the moment
Expr = {Prec3BinExpr | NonBinaryExpr}

NonBinaryExpr = { ThisExpr
		        | Identifier // LocalOrFieldVar
		        | InstVarExpr
		        | UnaryExpr
		        | IntLiteral
		        | BoolLiteral
		        | CharLiteral
		        | StrLiteral
		        | JNull
		        | ParanthesizedExpr
		        | StmtExpr}

ThisExpr = {"this"}
JNull    = {"null"}

IntLiteral  = {NUMBER+}
BoolLiteral = {"true" | "false"}
CharLiteral = {"'" ~ ASCII ~ "'"}
StrLiteral  = {"\"" ~ ASCII* ~ "\""}

InstVarExpr      = {(Identifier|ThisExpr) ~ "." ~ InnerInstVarExpr}
InnerInstVarExpr = {Identifier ~ ("." ~ (InnerInstVarExpr|Identifier))?}

ParanthesizedExpr = {"(" ~ Expr ~ ")"}

UnaryExpr = {UnaryOp ~ (InstVarExpr|Identifier|ParanthesizedExpr)}
UnaryOp = {"+" | "-" | "!"}

Prec3BinExpr = {(Prec2BinExpr  ~ Prec3BinOp ~ Prec3BinExpr) | Prec2BinExpr}
Prec2BinExpr = {(Prec1BinExpr  ~ Prec2BinOp ~ Prec2BinExpr) | Prec1BinExpr}
Prec1BinExpr = {(Prec0BinExpr  ~ Prec1BinOp ~ Prec1BinExpr) | Prec0BinExpr}
Prec0BinExpr = {(NonBinaryExpr ~ Prec0BinOp ~ Prec0BinExpr) | NonBinaryExpr}
Prec3BinOp = {"*" | "/" | "%"}
Prec2BinOp = {"+" | "-"}
Prec1BinOp = {"<=" | ">=" | "<" | ">"}
Prec0BinOp = {"==" | "!=" | "&&" | "||"}
